#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public class StopRequest
{
    public bool IsSoftStopRequested { get; private set; }

    public void RequestSoftStop()
    {
        IsSoftStopRequested = true;
    }
}

#!csharp

public interface ICommand
{
    void Execute();
}

#!csharp

public class HardStop : ICommand
{
    private Thread stoppingThread;

    public HardStop(Thread stoppingThread)
    {
        this.stoppingThread = stoppingThread;
    }

    public void Execute()
    {
        stoppingThread.Interrupt();
    }
}

#!csharp

public class SoftStop : ICommand
{
    private BlockingCollection<ICommand> commandQueue;
    private StopRequest stopRequest;

    public SoftStop(BlockingCollection<ICommand> commandQueue, StopRequest stopRequest)
    {
        this.commandQueue = commandQueue;
        this.stopRequest = stopRequest;
    }

    public void Execute()
    {
        stopRequest.RequestSoftStop();
        while (commandQueue.TryTake(out ICommand command))
        {
            command.Execute();
        }
    }
}

#!csharp

public static class ExceptionHandler
{
    public static void Handle(Exception exception, ICommand command)
    {
        Console.WriteLine($"Исключение {exception} при попытке выполнить команду: {command.GetType().Name}");
    }
}

#!csharp

public class ServerThread
{
    public BlockingCollection<ICommand> CommandQueue { get; } = new BlockingCollection<ICommand>();
    public Thread MainThread { get; private set; }
    private StopRequest stopRequest = new StopRequest();

    public ServerThread()
    {
        MainThread = new Thread(Run);
        MainThread.Start();
    }

    public void Run()
    {
        try
        {
            while (!stopRequest.IsSoftStopRequested || CommandQueue.Count > 0)
            {
                ICommand command = CommandQueue.Take();
                command.Execute();
            }
        }
        catch (ThreadInterruptedException)
        {
            Console.WriteLine("Поток был прерван хард-стопом.");
        }
    }

    public void AddCommand(ICommand command)
    {
        CommandQueue.Add(command);
    }
}

#!csharp

public class TestCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Тестирование сервера...");
    }
}

#!csharp

var serverThread = new ServerThread();

serverThread.AddCommand(new TestCommand());
serverThread.AddCommand(new TestCommand());

serverThread.AddCommand(new HardStop(serverThread.MainThread));

serverThread.AddCommand(new TestCommand());

serverThread.MainThread.Join();
